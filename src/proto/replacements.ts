// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.3
// source: proto/replacements.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { Empty } from "../../google/protobuf/empty";

export const protobufPackage = "replacements";

export interface PostReplacementsUpdate {
  date: UpdateReplacementsDataDto | undefined;
}

export interface UpdateReplacementsDataDto {
  day: string;
  month: string;
  year: string;
  subst: ReplacementsInfoDto[];
}

export interface ReplacementsInfoDto {
  absent: string;
  lesson: string;
  subject: string;
  forms: string;
  groups: string;
  substituting: string;
  substType: string;
  cancelled: string;
  note: string;
  room: string;
}

function createBasePostReplacementsUpdate(): PostReplacementsUpdate {
  return { date: undefined };
}

export const PostReplacementsUpdate = {
  encode(message: PostReplacementsUpdate, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.date !== undefined) {
      UpdateReplacementsDataDto.encode(message.date, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PostReplacementsUpdate {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePostReplacementsUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.date = UpdateReplacementsDataDto.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PostReplacementsUpdate {
    return { date: isSet(object.date) ? UpdateReplacementsDataDto.fromJSON(object.date) : undefined };
  },

  toJSON(message: PostReplacementsUpdate): unknown {
    const obj: any = {};
    if (message.date !== undefined) {
      obj.date = UpdateReplacementsDataDto.toJSON(message.date);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PostReplacementsUpdate>, I>>(base?: I): PostReplacementsUpdate {
    return PostReplacementsUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PostReplacementsUpdate>, I>>(object: I): PostReplacementsUpdate {
    const message = createBasePostReplacementsUpdate();
    message.date = (object.date !== undefined && object.date !== null)
      ? UpdateReplacementsDataDto.fromPartial(object.date)
      : undefined;
    return message;
  },
};

function createBaseUpdateReplacementsDataDto(): UpdateReplacementsDataDto {
  return { day: "", month: "", year: "", subst: [] };
}

export const UpdateReplacementsDataDto = {
  encode(message: UpdateReplacementsDataDto, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.day !== "") {
      writer.uint32(10).string(message.day);
    }
    if (message.month !== "") {
      writer.uint32(18).string(message.month);
    }
    if (message.year !== "") {
      writer.uint32(26).string(message.year);
    }
    for (const v of message.subst) {
      ReplacementsInfoDto.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateReplacementsDataDto {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateReplacementsDataDto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.day = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.month = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.year = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.subst.push(ReplacementsInfoDto.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateReplacementsDataDto {
    return {
      day: isSet(object.day) ? globalThis.String(object.day) : "",
      month: isSet(object.month) ? globalThis.String(object.month) : "",
      year: isSet(object.year) ? globalThis.String(object.year) : "",
      subst: globalThis.Array.isArray(object?.subst)
        ? object.subst.map((e: any) => ReplacementsInfoDto.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UpdateReplacementsDataDto): unknown {
    const obj: any = {};
    if (message.day !== "") {
      obj.day = message.day;
    }
    if (message.month !== "") {
      obj.month = message.month;
    }
    if (message.year !== "") {
      obj.year = message.year;
    }
    if (message.subst?.length) {
      obj.subst = message.subst.map((e) => ReplacementsInfoDto.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateReplacementsDataDto>, I>>(base?: I): UpdateReplacementsDataDto {
    return UpdateReplacementsDataDto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateReplacementsDataDto>, I>>(object: I): UpdateReplacementsDataDto {
    const message = createBaseUpdateReplacementsDataDto();
    message.day = object.day ?? "";
    message.month = object.month ?? "";
    message.year = object.year ?? "";
    message.subst = object.subst?.map((e) => ReplacementsInfoDto.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReplacementsInfoDto(): ReplacementsInfoDto {
  return {
    absent: "",
    lesson: "",
    subject: "",
    forms: "",
    groups: "",
    substituting: "",
    substType: "",
    cancelled: "",
    note: "",
    room: "",
  };
}

export const ReplacementsInfoDto = {
  encode(message: ReplacementsInfoDto, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.absent !== "") {
      writer.uint32(10).string(message.absent);
    }
    if (message.lesson !== "") {
      writer.uint32(18).string(message.lesson);
    }
    if (message.subject !== "") {
      writer.uint32(26).string(message.subject);
    }
    if (message.forms !== "") {
      writer.uint32(34).string(message.forms);
    }
    if (message.groups !== "") {
      writer.uint32(42).string(message.groups);
    }
    if (message.substituting !== "") {
      writer.uint32(50).string(message.substituting);
    }
    if (message.substType !== "") {
      writer.uint32(58).string(message.substType);
    }
    if (message.cancelled !== "") {
      writer.uint32(66).string(message.cancelled);
    }
    if (message.note !== "") {
      writer.uint32(74).string(message.note);
    }
    if (message.room !== "") {
      writer.uint32(82).string(message.room);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReplacementsInfoDto {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReplacementsInfoDto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.absent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.lesson = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.subject = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.forms = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.groups = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.substituting = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.substType = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.cancelled = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.note = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.room = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReplacementsInfoDto {
    return {
      absent: isSet(object.absent) ? globalThis.String(object.absent) : "",
      lesson: isSet(object.lesson) ? globalThis.String(object.lesson) : "",
      subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
      forms: isSet(object.forms) ? globalThis.String(object.forms) : "",
      groups: isSet(object.groups) ? globalThis.String(object.groups) : "",
      substituting: isSet(object.substituting) ? globalThis.String(object.substituting) : "",
      substType: isSet(object.substType) ? globalThis.String(object.substType) : "",
      cancelled: isSet(object.cancelled) ? globalThis.String(object.cancelled) : "",
      note: isSet(object.note) ? globalThis.String(object.note) : "",
      room: isSet(object.room) ? globalThis.String(object.room) : "",
    };
  },

  toJSON(message: ReplacementsInfoDto): unknown {
    const obj: any = {};
    if (message.absent !== "") {
      obj.absent = message.absent;
    }
    if (message.lesson !== "") {
      obj.lesson = message.lesson;
    }
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.forms !== "") {
      obj.forms = message.forms;
    }
    if (message.groups !== "") {
      obj.groups = message.groups;
    }
    if (message.substituting !== "") {
      obj.substituting = message.substituting;
    }
    if (message.substType !== "") {
      obj.substType = message.substType;
    }
    if (message.cancelled !== "") {
      obj.cancelled = message.cancelled;
    }
    if (message.note !== "") {
      obj.note = message.note;
    }
    if (message.room !== "") {
      obj.room = message.room;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReplacementsInfoDto>, I>>(base?: I): ReplacementsInfoDto {
    return ReplacementsInfoDto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReplacementsInfoDto>, I>>(object: I): ReplacementsInfoDto {
    const message = createBaseReplacementsInfoDto();
    message.absent = object.absent ?? "";
    message.lesson = object.lesson ?? "";
    message.subject = object.subject ?? "";
    message.forms = object.forms ?? "";
    message.groups = object.groups ?? "";
    message.substituting = object.substituting ?? "";
    message.substType = object.substType ?? "";
    message.cancelled = object.cancelled ?? "";
    message.note = object.note ?? "";
    message.room = object.room ?? "";
    return message;
  },
};

export interface UpdateReplacementsListener {
  UpdateReplacements(request: PostReplacementsUpdate): Promise<Empty>;
}

export const UpdateReplacementsListenerServiceName = "replacements.UpdateReplacementsListener";
export class UpdateReplacementsListenerClientImpl implements UpdateReplacementsListener {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || UpdateReplacementsListenerServiceName;
    this.rpc = rpc;
    this.UpdateReplacements = this.UpdateReplacements.bind(this);
  }
  UpdateReplacements(request: PostReplacementsUpdate): Promise<Empty> {
    const data = PostReplacementsUpdate.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateReplacements", data);
    return promise.then((data) => Empty.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
